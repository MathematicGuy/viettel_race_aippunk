from pymilvus import MilvusClient, DataType, Function, FunctionType
from typing import List, Dict, Any


class MilvusHybridStore:
    """Milvus store tối ưu cho hybrid search"""

    def __init__(self, uri, token, collection_name="hybrid_rag_collection"):
        self.client = MilvusClient(uri=uri, token=token)
        self.collection_name = collection_name
        self.text_dense_dim = 768  # paraphrase-multilingual-mpnet-base-v2
        self.image_dense_dim = 512  # clip

    def create_hybrid_collection(self):
        """Tạo collection cho hybrid search"""
        # if self.client.has_collection(self.collection_name):
        #     self.client.drop_collection(self.collection_name)

        schema = self.client.create_schema(
            auto_id=True,
            enable_dynamic_fields=True
        )

        # Primary key
        schema.add_field(
            field_name="id",
            datatype=DataType.VARCHAR,
            is_primary=True,
            max_length=100
        )

        # Content field
        schema.add_field(
            field_name="content",
            datatype=DataType.VARCHAR,
            max_length=8000,
            enable_analyzer=True,
        )

        # Text fields
        schema.add_field(
            field_name="text_dense",
            datatype=DataType.FLOAT_VECTOR,
            dim=self.text_dense_dim,
        )

        schema.add_field(
            field_name="text_sparse",
            datatype=DataType.SPARSE_FLOAT_VECTOR,
        )

        # Image fields
        schema.add_field(
            field_name="image_dense",
            datatype=DataType.FLOAT_VECTOR,
            dim=self.image_dense_dim,
        )

        schema.add_field(
            field_name="image_path",
            datatype=DataType.VARCHAR,
            max_length=500,
        )

        # schema.add_field(
        #     field_name="image_caption",
        #     datatype=DataType.VARCHAR,
        #     max_length=1000,
        # )

        # Metadata
        schema.add_field(
            field_name="metadata",
            datatype=DataType.JSON
        )

        # BM25 function cho text sparse
        bm25_function = Function(
            name="text_bm25_emb",
            function_type=FunctionType.BM25,
            input_field_names=["content"],
            output_field_names=["text_sparse"]
        )
        schema.add_function(bm25_function)

        # Index parameters
        index_params = self.client.prepare_index_params()

        # Text dense index
        index_params.add_index(
            field_name="text_dense",
            index_type="HNSW",
            metric_type="COSINE",
            params={"M": 16, "efConstruction": 200}
        )

        # Text sparse index
        index_params.add_index(
            field_name="text_sparse",
            index_type="SPARSE_INVERTED_INDEX",
            metric_type="BM25"
        )

        # Image dense index
        index_params.add_index(
            field_name="image_dense",
            index_type="HNSW",
            metric_type="COSINE",
            params={"M": 16, "efConstruction": 200}
        )

        self.client.create_collection(
            collection_name=self.collection_name,
            schema=schema,
            index_params=index_params
        )

        print(f"✅ Hybrid collection '{self.collection_name}' đã được tạo!")

    def insert_entities(self, entities: List[Dict[str, Any]]):
        """Insert entities vào collection"""
        batch_size = 50
        for i in range(0, len(entities), batch_size):
            batch = entities[i:i + batch_size]

            # Remove text_sparse from entities as it's generated by BM25 function
            for entity in batch:
                entity.pop('text_sparse', None)

            self.client.insert(
                collection_name=self.collection_name,
                data=batch
            )
            print(f"✅ Đã insert batch {i//batch_size + 1}/{(len(entities)-1)//batch_size + 1}")

        print(f"✅ Đã insert {len(entities)} entities vào Milvus!")
